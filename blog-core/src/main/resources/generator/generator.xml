<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>
    <!-- 一、配置数据库连接信息 -->
    <!--targetRuntime=“MyBatis3“可以生成带条件的增删改查 -->
    <!--targetRuntime=“MyBatis3Simple“可以生成基本的增删改查-->
    <context id="mysql" targetRuntime="MyBatis3Simple" defaultModelType="flat">

        <!-- 生成的Java文件的编码 -->
        <property name="javaFileEncoding" value="UTF-8"/>

        <!-- 阻止生成自动注释 -->
        <commentGenerator type="com.oneself.blog.common.generator.MyCommentGenerator">
            <property name="javaFileEncoding" value="UTF-8"/>
            <!-- 是否生成注释代时间戳-->
            <property name="suppressDate" value="true"/>
            <!-- true就是去掉注释 -->
            <property name="suppressAllComments" value="false"/>
        </commentGenerator>

        <!-- 连接数据库 -->
        <jdbcConnection driverClass="com.mysql.cj.jdbc.Driver"
                        connectionURL="jdbc:mysql://172.20.200.112:3306/blog?serverTimezone=GMT%2B8"
                        userId="root"
                        password="root">
            <!-- 逆向修复生成实体类字段不全问题 -->
            <property name="nullCatalogMeansCurrent" value="true"/>
        </jdbcConnection>

        <!-- java类型处理器
                    用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl；
                    注意一点，默认会先尝试使用Integer，Long，Short等来对应DECIMAL和 NUMERIC数据类型；
                -->
        <javaTypeResolver >
                <!-- true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型
                        默认false -->
            <property name="forceBigDecimals" value="true" />
        </javaTypeResolver>

        <!-- 二、指定javabean生成的位置 -->
        <javaModelGenerator targetPackage="com.oneself.blog.article.article.entity.pojo" targetProject=".\src\main\java">
            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
            <property name="enableSubPackages" value="true" />
            <!-- 设置是否在getter方法中，对String类型字段调用trim()方法 -->
            <property name="trimStrings" value="true" />
        </javaModelGenerator>

        <!-- 三、指定sql映射文件生成的位置 -->
        <sqlMapGenerator targetPackage="mapper.article.article"  targetProject=".\src\main\resources">
            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
            <property name="enableSubPackages" value="true" />
        </sqlMapGenerator>

        <!-- 四、指定dao接口生成的位置 -->
        <!-- 对于mybatis来说，即生成Mapper接口，注意，如果没有配置该元素，那么默认不会生成Mapper接口
            targetPackage/targetProject:同javaModelGenerator
            type：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）：
                1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML；
                2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中；
                3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML；
            注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER
        -->
        <javaClientGenerator type="XMLMAPPER" targetPackage="com.oneself.blog.article.article.dao" targetProject=".\src\main\java">
            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
            <property name="enableSubPackages" value="true" />
        </javaClientGenerator>

        <!-- 五、table指定每个表的生成策略 -->
        <!--配置要逆向解析的数据表，tableName对应表名，domainObjectName对应javaBean名-->
        <table tableName="y_article" domainObjectName="Article"></table>

    </context>
</generatorConfiguration>